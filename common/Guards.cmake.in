# Flexible CMake Modules
# ------------------------------------------------------------------------------
# Author: Pavel Tsayukov
# Repository: https://github.com/tsayukov/flexible-cmake-modules
# Distributed under the MIT License. See the accompanying file LICENSE or
# https://opensource.org/license/mit for details.
# ------------------------------------------------------------------------------
#
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
# FOR COAUTHORS AND CONTRIBUTORS: fill in your name, contacts, and changes above
#
#[=================================================================[#github/wiki
  # Guards

  ## Table of Contents

  - [fcm_requires_cmake](#fcm_requires_cmake)
  - [fcm_no_in_source_builds_guard](#fcm_no_in_source_builds_guard)

  ## fcm_requires_cmake

  Check if CMake's version is not less than `<version>`, otherwise, print
  the error message with `"<reason>"`.

  ```
  fcm_requires_cmake(<version> "<reason>")
  ```

  It may be useful if building in the developer mode needs a higher CMake's
  version than building to install only the project.

  ## fcm_no_in_source_builds_guard

  Prevent in-source builds.

  ```
  fcm_no_in_source_builds_guard([RECURSIVE <directories>...])
  ```

  Check if [`CMAKE_CURRENT_LIST_DIR`][1] is not [`PROJECT_BINARY_DIR`][2].
  If `<directories>` following `RECURSIVE` are passed, check
  if `PROJECT_BINARY_DIR` doesn't include any of `<directories>`'s paths.
  If some of `<directories>`'s paths are a relative path, prepend
  `CMAKE_CURRENT_LIST_DIR` to them.

  However, if the project is included as a subproject, the outer project
  is allowed to build wherever it wants.

  [1]: https://cmake.org/cmake/help/latest/variable/CMAKE_CURRENT_LIST_DIR.html
  [2]: https://cmake.org/cmake/help/latest/variable/PROJECT_BINARY_DIR.html

#]=================================================================]#github/wiki

include_guard(GLOBAL)

@FCM_COMMAND_PREFIX@include("common/Project" TEMPLATE)


function(@FCM_COMMAND_PREFIX@requires_cmake
  version
  reason
)
  if (CMAKE_VERSION VERSION_LESS "${version}")
    message(FATAL_ERROR
      "CMake ${version}+ is required because of the reason \"${reason}\", but "
      "the current version is ${CMAKE_VERSION}."
    )
  endif()
endfunction()

function(@FCM_COMMAND_PREFIX@no_in_source_builds_guard)
  @FCM_COMMAND_PREFIX@get_project_is_top_level()
  if (NOT PROJECT_IS_TOP_LEVEL)
    return()
  endif()

  cmake_parse_arguments(PARSE_ARGV 0 "ARGS" "" "" "RECURSIVE")

  set(error_message
    "In-source builds are not allowed. Instead, provide a path to build tree "
    "like so:\n"

    "cmake -B <binary-directory>\n"

    "Or use presets with an out-of-source build configuration like so:\n"

    "cmake --preset <preset-name>\n"

    "To remove files you accidentally created execute:\n"

    "NOTE: be careful if you had you own directory and files with same names! "
    "Use your version control system to restore your data.\n"

    "Linux: rm -rf CMakeFiles CMakeCache.txt cmake_install.cmake\n"

    "Windows (PowerShell): "
    "Remove-Item CMakeFiles, CMakeCache.txt, cmake_install.cmake -Force -Recurse\n"

    "Windows (Command Prompt): "
    "rmdir CMakeFiles /s /q && del /q CMakeCache.txt cmake_install.cmake\n"

    "NOTE: Build generator files may also remain, that is, 'Makefile', "
    "'build.ninja' and so forth."
  )

  if (CMAKE_CURRENT_LIST_DIR STREQUAL PROJECT_BINARY_DIR)
    message(FATAL_ERROR ${error_message})
  endif()

  foreach (dir IN LISTS ARGS_RECURSIVE)
    if (NOT IS_ABSOLUTE "${dir}")
      set(dir "${CMAKE_CURRENT_LIST_DIR}/${dir}")
    endif()
    if (PROJECT_BINARY_DIR MATCHES "^${dir}/?")
      message(FATAL_ERROR ${error_message})
    endif()
  endforeach()
endfunction()
